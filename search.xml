<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>接口优化技巧</title>
      <link href="/2023/04/03/ad8602.html"/>
      <url>/2023/04/03/ad8602.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>一、背景<br>针对老项目，去年做了许多降本增效的事情，其中发现最多的就是接口耗时过长的问题，就集中搞了一次接口性能优化。本文将给小伙伴们分享一下接口优化的通用方案。</p><p><img data-fancybox="gallery" src="/%5Cimages%5Czongjie.png" alt="uploaded!" data-caption="uploaded!" loading="lazy"></p><p>二、接口优化方案总结</p><p>1.批处理<br>批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//for循环单笔入库</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEatch</span><span class="token punctuation">(</span>msg<span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//批量入库</span><span class="token function">batchInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.异步处理<br>异步思想：针对耗时比较长且不是结果必须的逻辑，我们可以考虑放到异步执行，这样能降低接口耗时。<br>例如一个理财的申购接口，入账和写入申购文件是同步执行的，因为是 T+1 交易，后面这两个逻辑其实不是结果必须的，我们并不需要关注它的实时结果，所以我们考虑把入账和写入申购文件改为异步处理。如图所示：</p><p><img data-fancybox="gallery" src="/%5Cimages%5Cyibu1.png" alt="uploaded!" data-caption="uploaded!" loading="lazy"></p><p>至于异步的实现方式，可以用线程池，也可以用消息队列，还可以用一些调度任务框架。</p><p>3.空间换时间<br>一个很好理解的空间换时间的例子是合理使用缓存，针对一些频繁使用且不频繁变更的数据，可以提前缓存起来，需要时直接查缓存，避免频繁地查询数据库或者重复计算。</p><p>需要注意的事，这里用了合理二字，因为空间换时间也是一把双刃剑，需要综合考虑你的使用场景，毕竟缓存带来的数据一致性问题也挺令人头疼。</p><p>这里的缓存可以是 R2M，也可以是本地缓存、memcached，或者 Map。</p><p>举一个股票工具的查询例子：</p><p>因为策略轮动的调仓信息，每周只更新一次，所以原来的调接口就去查库的逻辑并不合理，而且拿到调仓信息后，需要经过复杂计算，最终得出回测收益和跑赢沪深指数这些我们想要的结果。如果我们把查库操作和计算结果放入缓存，可以节省很多的执行时间。如图：</p><p><img data-fancybox="gallery" src="/%5Cimages%5Cgupiao.png" alt="uploaded!" data-caption="uploaded!" loading="lazy"></p><p>4.预处理<br>也就是预取思想，就是提前要把查询的数据，提前计算好，放入缓存或者表中的某个字段，用的时候会大幅提高接口性能。跟上面那个例子很像，但是关注点不同。</p><p>举个简单的例子：理财产品，会有根据净值计算年化收益率的数据展示需求，利用净值去套用年化收益率计算公式计算的逻辑我们可以采用预处理，这样每一次接口调用直接取对应字段就可以了。</p><p>5.池化思想<br>我们都用过数据库连接池，线程池等，这就是池思想的体现，它们解决的问题就是避免重复创建对象或创建连接，可以重复利用，避免不必要的损耗，毕竟创建销毁也会占用时间。</p><p>池化思想包含但并不局限于以上两种，总的来说池化思想的本质是<strong>预分配与循环使用，</strong>明白这个原理后，我们即使是在做一些业务场景的需求时，也可以利用起来。</p><p>比如：对象池</p><p>6.串行改并行</p><p>串行就是，当前执行逻辑必须等上一个执行逻辑结束之后才执行，并行就是两个执行逻辑互不干扰，所以并行相对来说就比较节省时间，当然是建立在没有结果参数依赖的前提下。</p><p>比如，理财的持仓信息展示接口，我们既需要查询用户的账户信息，也需要查询商品信息和 banner 位信息等等来渲染持仓页，如果是串行，基本上接口耗时就是累加的。如果是并行，接口耗时将大大降低。</p><p>如图：</p><p><img data-fancybox="gallery" src="/%5Cimages%5Cchuanlian.png" alt="uploaded!" data-caption="uploaded!" loading="lazy"></p><p>7.索引<br>加索引能大大提高数据查询效率，这个在接口设计之出也会考虑到，这里不再多赘述，随着需求的迭代，我们重点整理一下索引不生效的一些场景，希望对小伙伴们有所帮助。</p><p>具体不生效场景不再一一举例，后面有时间的话，单独整理一下。</p><p><img data-fancybox="gallery" src="/%5Cimages%5Csuoyin.png" alt="uploaded!" data-caption="uploaded!" loading="lazy"></p><p>8.避免大事务</p><p>所谓大事务问题，就是<strong>运行时间较长的事务，</strong>由于事务一致不提交，会导致数据库连接被占用，影响到别的请求访问数据库，影响别的接口性能。</p><p>举个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"taskTransactionManager"</span><span class="token punctuation">,</span> propagation <span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span> isolation <span class="token operator">=</span><span class="token class-name">Isolation</span><span class="token punctuation">.</span>READ_COMMITTED<span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">publicBasicResultpurchaseRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRecordrecord</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BasicResult</span> result <span class="token operator">=</span><span class="token function">newBasicResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入账户任务</span>        taskMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">ManagerParamUtil</span><span class="token punctuation">.</span><span class="token function">buildTask</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span><span class="token class-name">TaskEnum<span class="token punctuation">.</span>Task_type</span><span class="token punctuation">.</span>pension_account<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TaskEnum<span class="token punctuation">.</span>Account_bizType</span><span class="token punctuation">.</span>purchase_request<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入同步任务</span>        taskMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">ManagerParamUtil</span><span class="token punctuation">.</span><span class="token function">buildTask</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span><span class="token class-name">TaskEnum<span class="token punctuation">.</span>Task_type</span><span class="token punctuation">.</span>pension_sync<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TaskEnum<span class="token punctuation">.</span>Sync_bizType</span><span class="token punctuation">.</span>purchase<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入影像件上传任务</span>        taskMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">ManagerParamUtil</span><span class="token punctuation">.</span><span class="token function">buildTask</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">,</span><span class="token class-name">TaskEnum<span class="token punctuation">.</span>Task_type</span><span class="token punctuation">.</span>pension_sync<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TaskEnum<span class="token punctuation">.</span>Sync_bizType</span><span class="token punctuation">.</span>cert<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">ResultInfoEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这块代码主要是申购申请完成后，执行一系列的后续操作，如果现在新增申购完成后，发送 push 通知用户的需求。很有可能我们会在后面直接追加，如下图所示：事务中嵌套 RPC 调用，即非 DB 操作，这些非 DB 操作如果耗时较大的话，可能会出现大事务问题。大数据引发的问题主要有：死锁、接口超时、主从延迟等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"taskTransactionManager"</span><span class="token punctuation">,</span> propagation <span class="token operator">=</span><span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span> isolation <span class="token operator">=</span><span class="token class-name">Isolation</span><span class="token punctuation">.</span>READ_COMMITTED<span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">publicBasicResultpurchaseRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRecordrecord</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BasicResult</span> result <span class="token operator">=</span><span class="token function">newBasicResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        pushRpc<span class="token punctuation">.</span><span class="token function">doPush</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">ResultInfoEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以为避免大事务问题，我们可以通过以下方案规避：<br>1，RPC 调用不放到事务里面<br>2，查询操作尽量放到事务之外<br>3，事务中避免处理太多数据</p><p>9.优化程序结构</p><p>程序结构问题一般出现在多次需求迭代后，代码叠加形成。会造成一些重复查询、多次创建对象等耗时问题。在多人维护一个项目时比较多见。解决起来也比较简单，我们需要针对接口整体做重构，评估每个代码块的作用和用途，调整执行顺序。</p><p>10.深分页问题</p><p>深分页问题比较常见，分页我们一般最先想到的就是 limit ，为什么会慢，我们可以看下这个 SQL：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> purchase_record <span class="token keyword">where</span> productCode <span class="token operator">=</span><span class="token string">'PA9044'</span><span class="token operator">and</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">4</span> orderby orderTime <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>limit 100000,200 意味着会扫描 100200 行，然后返回 200 行，丢弃掉前 100000 行。所以执行速度很慢。一般可以采用标签记录法来优化，比如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> purchase_record <span class="token keyword">where</span> productCode <span class="token operator">=</span><span class="token string">'PA9044'</span><span class="token operator">and</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">and</span> id <span class="token operator">></span> <span class="token number">100000</span> <span class="token keyword">limit</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样优化的好处是命中了主键索引，无论多少页，性能都还不错，但是局限性是需要一个连续自增的字段</p><p>11.SQL 优化</p><p>sql 优化能大幅提高接口的查询性能，由于本文重点讲述接口优化的方案，具体 sql 优化不再一一列举，小伙伴们可以结合索引、分页、等关注点考虑优化方案。</p><p>12.锁粒度避免过粗</p><p>锁一般是为了在高并发场景下保护共享资源采用的一种手段，但是如果锁的粒度太粗，会很影响接口性能。</p><p>关于锁粒度：就是你要锁的范围有多大，不管是 synchronized 还是 redis 分布式锁，只需要在临界资源处加锁即可，不涉及共享资源的，不必要加锁，就好比你要上卫生间，只需要把卫生间的门锁上就可以，不需要把客厅的门也锁上。</p><p>错误的加锁方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//非共享资源</span><span class="token function">privatevoidnotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//共享资源</span><span class="token function">privatevoidshare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">privateintwrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">notShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确的加锁方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//非共享资源</span><span class="token function">privatevoidnotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//共享资源</span><span class="token function">privatevoidshare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">privateintright</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">notShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>悲惨 科目一学习 技巧</title>
      <link href="/2023/02/17/77ea781c.html"/>
      <url>/2023/02/17/77ea781c.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img data-fancybox="gallery" src="/2023/02/17/77ea781c/kemu1.png" alt="科目一" data-caption="科目一" loading="lazy"></p><p>科目一笔记记录 摘自新规500+</p><p>A2为重型牵引挂车；B1为中型客车；B2为大型货车；A1为大型客车。</p><p>高逆 倒车 超速50 12、违停 9、应急 超速20 6、低速 普逆 不按规定车道行驶 超车让行 不礼让校车 借道超车 3 会车 1</p><p>超速 校车20%扣6分，校车30%扣12分</p><p>车牌，驾驶证，酒驾，都是12！</p><p>车型不符扣九分</p><p>车牌 不按规定扣3，不挂扣9，伪造扣12</p><p>违法占用应急车道和违反信号灯扣除6分 </p><p>电话3安全带1</p><p>行灯会，禁检安 1</p><p>假一骗三，驾驶人以欺骗、贿赂手段取得驾驶证的，三年内不得再次申请驾驶证。 代3超5年不得考</p><p>考试中一年，取得后三年，假一吊二撤三醉五逃终生</p><p>涉及灯光问题: 不规定使用灯光一分，故障不开危险报警灯三分，不遵守交通信号灯六分……</p><p>12分只需学习，24分则需参加道路考试，36分那就又要参加场地，又要参加道路考试</p><p>超载小于30%扣一分，30%至50%扣三分</p><p>7座以上超员50未到100的，9分，超速20未到50的，6分</p><p>能见200，车速60，车距100。能见100，车速40，车距50。能见50，车速20，尽快驶离。</p><p>审验作假一千， 组织他人审验两千， 组织他人有违法两万， 组织贿赂以驾驶证谋取利益三倍以上五万五倍一下十万</p><p>疲劳驾驶货车3分，客车9分</p><p>增驾 轻1中2大3</p><p>自适应巡航 ACC  定速巡航 CCS  防碰撞预警 FCW  电子制动力分配 EBD   交通标志识别系统 TSR  紧急制动辅助系统 EBA  盲点监测系统  BSD   自动变道辅助系统  ALC  自动刹车辅助系统 AEB  电子稳定控制系统 ESP<br>交通信息频道  TMC   自适应前大灯系统 AFS  盲点辅助  BSA</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal 四舍五入</title>
      <link href="/2023/02/09/c2463c8c.html"/>
      <url>/2023/02/09/c2463c8c.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">round_half_up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//常用</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四舍五入(保留位后一位是5进位) = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.35"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四舍五入(保留位后一位是5舍弃) = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.35"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_DOWN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四舍五入(保留位是奇数) = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"4.55"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_EVEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四舍五入(保留位是偶数) = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"4.45"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_EVEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"            进位    = "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.31"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>四舍五入<span class="token punctuation">(</span>保留位后一位是<span class="token number">5</span>进位<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2.4</span>四舍五入<span class="token punctuation">(</span>保留位后一位是<span class="token number">5</span>舍弃<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2.3</span>四舍五入<span class="token punctuation">(</span>保留位是奇数<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4.6</span>四舍五入<span class="token punctuation">(</span>保留位是偶数<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4.4</span>            进位    <span class="token operator">=</span> <span class="token number">2.4</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ROUND_CEILING Rounding mode to round towards positive infinity.  向正无穷方向舍入ROUND_DOWN Rounding mode to round towards zero.  向零方向舍入ROUND_FLOOR Rounding mode to round towards negative infinity.  向负无穷方向舍入ROUND_HALF_DOWN Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round down.  向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向下舍入, 例如1.55 保留一位小数结果为1.5ROUND_HALF_EVEN Rounding mode to round towards the &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case, round towards the even neighbor.  向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，如果保留位上的数字是奇数，使用ROUND_HALF_UP ，如果是偶数，使用ROUND_HALF_DOWNROUND_HALF_UP Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round up.  向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向上舍入, 1.55保留一位小数结果为1.6ROUND_UNNECESSARY Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary.  计算结果是精确的，不需要舍入模式ROUND_UP Rounding mode to round away from zero.   向远离0的方向舍入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO-admin安装和使用 汉化版</title>
      <link href="/2023/02/03/4629ae96.html"/>
      <url>/2023/02/03/4629ae96.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1.安装</p><p>进入 hexo 源文件目录，执行命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-adminhexo server -dopen http:&#x2F;&#x2F;localhost:4000&#x2F;admin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.配置<br>编辑根目录下：_config.yml 文件，添加：</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中：<br>username 为登录的用户名，password_hash 为密码的 bcrypt 哈希值，secret 用于使 cookie 安全，可以尽可能复杂。<br>password_hash 的生成</p><p>3.汉化<br>打开 myblog&#x2F;node_modules&#x2F;hexo-admin&#x2F;www&#x2F;bundle.js</p><p>然后把bundle.js的内容换成我的代码：</p><p><a href="https://gitlab.com/KINGWDY/tgbb/-/raw/main/bundle.js">https://gitlab.com/KINGWDY/tgbb/-/raw/main/bundle.js</a></p><p>或者 下载补丁的方式</p><p>使用方法<br>打开博客目录下的“\node_modules\hexo-admin”目录，全选复制所有补丁覆盖原文件即可。</p><p>注意<br>我使用的是hexo-admin 2.3.0版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。</p><p>如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。</p><p>卸载hexo-admin：</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">npm uninstall hexo-admin –save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新安装2.3.0版本</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">npm install hexo-admin@2.3.0 –save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后覆盖插件。</p><p>下载链接：链接：<a href="https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw">https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw</a><br>提取码：t3r0</p><p>就可以愉快的play啦~~~</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis plus 条件构造器queryWrapper学习</title>
      <link href="/2023/02/03/10930.html"/>
      <url>/2023/02/03/10930.html</url>
      
        <content type="html"><![CDATA[<p>首先奉上mybatis plus的官方文档链接，再看本博客有不清晰的地方，可以查看文档<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><p><escape><span id="more"></span></escape></p><p><img data-fancybox="gallery" src="/2023/02/03/mybatis-plus-%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8queryWrapper%E5%AD%A6/image.png" alt="玖涯博客" data-caption="玖涯博客" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 摘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mybatis plus </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
