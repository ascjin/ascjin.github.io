{"meta":{"title":"ASC的学习空间","subtitle":"","description":"","author":"ASC.JIN","url":"https://ascjin.github.io","root":"/"},"pages":[{"title":"关于","date":"2023-02-03T08:55:54.000Z","updated":"2023-04-04T06:55:45.904Z","comments":true,"path":"about.html","permalink":"https://ascjin.github.io/about.html","excerpt":"","text":"博客事件轴 2023年02月17日 - 23年第一个计划正式成立 争取驾照早日到手 最新进度：科目二已过 2023年02月03日 - 空间正式创建，上线了第一篇自己的笔记摘录，望自己能够坚持下去。"},{"title":"文章归档","date":"2023-02-02T10:58:36.797Z","updated":"2023-02-02T10:58:36.797Z","comments":true,"path":"archives.html","permalink":"https://ascjin.github.io/archives.html","excerpt":"","text":""},{"title":"朋友","date":"2021-10-21T10:01:23.853Z","updated":"2021-10-21T10:01:23.853Z","comments":true,"path":"friend.html","permalink":"https://ascjin.github.io/friend.html","excerpt":"","text":"我们会慢慢长大成人，随着季节的不停变换路边盛开的鲜花也在不断变化，那个季节盛开的鲜花到底叫什么名字，轻轻摇曳着一旦触摸它就会轻轻地被扎到，用鼻子靠近闻一闻，会有一股淡淡的青涩太阳的芳香，随着那股香味慢慢变淡我们也在长大成人，但是那朵花一定会在某处继续盛开。 友情链接 添加友链 名称：折影轻梦介绍：崇尚自由、热爱科学、热爱艺术。链接：https://nexmoe.com/LOGO：https://avatar.mixcm.com/github/nexmoe 需要更新头像或者链接请留言，有时间会处理的 网站可访问却没有反链的，我会直接删除"},{"title":"","date":"2023-02-03T02:28:42.461Z","updated":"2023-02-03T02:28:42.461Z","comments":true,"path":"hexo-admin-ehc-images.json","permalink":"https://ascjin.github.io/hexo-admin-ehc-images.json","excerpt":"","text":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]"}],"posts":[{"title":"接口优化技巧","slug":"接口优化技巧","date":"2023-04-03T07:08:00.000Z","updated":"2023-04-04T09:14:57.522Z","comments":true,"path":"2023/04/03/ad8602.html","link":"","permalink":"https://ascjin.github.io/2023/04/03/ad8602.html","excerpt":"","text":"一、背景针对老项目，去年做了许多降本增效的事情，其中发现最多的就是接口耗时过长的问题，就集中搞了一次接口性能优化。本文将给小伙伴们分享一下接口优化的通用方案。 二、接口优化方案总结 1.批处理批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。 //for循环单笔入库 list.stream().forEatch(msg->&#123; insert(); &#125;); //批量入库 batchInsert(); 2.异步处理异步思想：针对耗时比较长且不是结果必须的逻辑，我们可以考虑放到异步执行，这样能降低接口耗时。例如一个理财的申购接口，入账和写入申购文件是同步执行的，因为是 T+1 交易，后面这两个逻辑其实不是结果必须的，我们并不需要关注它的实时结果，所以我们考虑把入账和写入申购文件改为异步处理。如图所示： 至于异步的实现方式，可以用线程池，也可以用消息队列，还可以用一些调度任务框架。 3.空间换时间一个很好理解的空间换时间的例子是合理使用缓存，针对一些频繁使用且不频繁变更的数据，可以提前缓存起来，需要时直接查缓存，避免频繁地查询数据库或者重复计算。 需要注意的事，这里用了合理二字，因为空间换时间也是一把双刃剑，需要综合考虑你的使用场景，毕竟缓存带来的数据一致性问题也挺令人头疼。 这里的缓存可以是 R2M，也可以是本地缓存、memcached，或者 Map。 举一个股票工具的查询例子： 因为策略轮动的调仓信息，每周只更新一次，所以原来的调接口就去查库的逻辑并不合理，而且拿到调仓信息后，需要经过复杂计算，最终得出回测收益和跑赢沪深指数这些我们想要的结果。如果我们把查库操作和计算结果放入缓存，可以节省很多的执行时间。如图： 4.预处理也就是预取思想，就是提前要把查询的数据，提前计算好，放入缓存或者表中的某个字段，用的时候会大幅提高接口性能。跟上面那个例子很像，但是关注点不同。 举个简单的例子：理财产品，会有根据净值计算年化收益率的数据展示需求，利用净值去套用年化收益率计算公式计算的逻辑我们可以采用预处理，这样每一次接口调用直接取对应字段就可以了。 5.池化思想我们都用过数据库连接池，线程池等，这就是池思想的体现，它们解决的问题就是避免重复创建对象或创建连接，可以重复利用，避免不必要的损耗，毕竟创建销毁也会占用时间。 池化思想包含但并不局限于以上两种，总的来说池化思想的本质是预分配与循环使用，明白这个原理后，我们即使是在做一些业务场景的需求时，也可以利用起来。 比如：对象池 6.串行改并行 串行就是，当前执行逻辑必须等上一个执行逻辑结束之后才执行，并行就是两个执行逻辑互不干扰，所以并行相对来说就比较节省时间，当然是建立在没有结果参数依赖的前提下。 比如，理财的持仓信息展示接口，我们既需要查询用户的账户信息，也需要查询商品信息和 banner 位信息等等来渲染持仓页，如果是串行，基本上接口耗时就是累加的。如果是并行，接口耗时将大大降低。 如图： 7.索引加索引能大大提高数据查询效率，这个在接口设计之出也会考虑到，这里不再多赘述，随着需求的迭代，我们重点整理一下索引不生效的一些场景，希望对小伙伴们有所帮助。 具体不生效场景不再一一举例，后面有时间的话，单独整理一下。 8.避免大事务 所谓大事务问题，就是运行时间较长的事务，由于事务一致不提交，会导致数据库连接被占用，影响到别的请求访问数据库，影响别的接口性能。 举个例子： @Transactional(value =\"taskTransactionManager\", propagation =Propagation.REQUIRED, isolation =Isolation.READ_COMMITTED, rollbackFor =&#123;RuntimeException.class,Exception.class&#125;) publicBasicResultpurchaseRequest(PurchaseRecordrecord)&#123; BasicResult result =newBasicResult(); //插入账户任务 taskMapper.insert(ManagerParamUtil.buildTask(record,TaskEnum.Task_type.pension_account.type(),TaskEnum.Account_bizType.purchase_request.type())); //插入同步任务 taskMapper.insert(ManagerParamUtil.buildTask(record,TaskEnum.Task_type.pension_sync.type(),TaskEnum.Sync_bizType.purchase.type())); //插入影像件上传任务 taskMapper.insert(ManagerParamUtil.buildTask(record,TaskEnum.Task_type.pension_sync.type(),TaskEnum.Sync_bizType.cert.type())); result.setInfo(ResultInfoEnum.SUCCESS); return result; &#125; 上面这块代码主要是申购申请完成后，执行一系列的后续操作，如果现在新增申购完成后，发送 push 通知用户的需求。很有可能我们会在后面直接追加，如下图所示：事务中嵌套 RPC 调用，即非 DB 操作，这些非 DB 操作如果耗时较大的话，可能会出现大事务问题。大数据引发的问题主要有：死锁、接口超时、主从延迟等。 @Transactional(value =\"taskTransactionManager\", propagation =Propagation.REQUIRED, isolation =Isolation.READ_COMMITTED, rollbackFor =&#123;RuntimeException.class,Exception.class&#125;) publicBasicResultpurchaseRequest(PurchaseRecordrecord)&#123; BasicResult result =newBasicResult(); ... pushRpc.doPush(record); result.setInfo(ResultInfoEnum.SUCCESS); return result; &#125; 所以为避免大事务问题，我们可以通过以下方案规避：1，RPC 调用不放到事务里面2，查询操作尽量放到事务之外3，事务中避免处理太多数据 9.优化程序结构 程序结构问题一般出现在多次需求迭代后，代码叠加形成。会造成一些重复查询、多次创建对象等耗时问题。在多人维护一个项目时比较多见。解决起来也比较简单，我们需要针对接口整体做重构，评估每个代码块的作用和用途，调整执行顺序。 10.深分页问题 深分页问题比较常见，分页我们一般最先想到的就是 limit ，为什么会慢，我们可以看下这个 SQL： select * from purchase_record where productCode ='PA9044'and status=4 orderby orderTime desc limit 100000,200 limit 100000,200 意味着会扫描 100200 行，然后返回 200 行，丢弃掉前 100000 行。所以执行速度很慢。一般可以采用标签记录法来优化，比如： select * from purchase_record where productCode ='PA9044'and status=4 and id > 100000 limit 200 这样优化的好处是命中了主键索引，无论多少页，性能都还不错，但是局限性是需要一个连续自增的字段 11.SQL 优化 sql 优化能大幅提高接口的查询性能，由于本文重点讲述接口优化的方案，具体 sql 优化不再一一列举，小伙伴们可以结合索引、分页、等关注点考虑优化方案。 12.锁粒度避免过粗 锁一般是为了在高并发场景下保护共享资源采用的一种手段，但是如果锁的粒度太粗，会很影响接口性能。 关于锁粒度：就是你要锁的范围有多大，不管是 synchronized 还是 redis 分布式锁，只需要在临界资源处加锁即可，不涉及共享资源的，不必要加锁，就好比你要上卫生间，只需要把卫生间的门锁上就可以，不需要把客厅的门也锁上。 错误的加锁方式： //非共享资源 privatevoidnotShare()&#123; &#125; //共享资源 privatevoidshare()&#123; &#125; privateintwrong()&#123; synchronized(this)&#123; share(); notShare(); &#125; &#125; 正确的加锁方式： //非共享资源 privatevoidnotShare()&#123; &#125; //共享资源 privatevoidshare()&#123; &#125; privateintright()&#123; notShare(); synchronized(this)&#123; share(); &#125; &#125;","categories":[],"tags":[],"author":"ASC.JIN"},{"title":"悲惨 科目一学习 技巧","slug":"悲惨科目一","date":"2023-02-17T10:04:00.000Z","updated":"2023-04-04T06:56:19.360Z","comments":true,"path":"2023/02/17/77ea781c.html","link":"","permalink":"https://ascjin.github.io/2023/02/17/77ea781c.html","excerpt":"","text":"科目一笔记记录 摘自新规500+ A2为重型牵引挂车；B1为中型客车；B2为大型货车；A1为大型客车。 高逆 倒车 超速50 12、违停 9、应急 超速20 6、低速 普逆 不按规定车道行驶 超车让行 不礼让校车 借道超车 3 会车 1 超速 校车20%扣6分，校车30%扣12分 车牌，驾驶证，酒驾，都是12！ 车型不符扣九分 车牌 不按规定扣3，不挂扣9，伪造扣12 违法占用应急车道和违反信号灯扣除6分 电话3安全带1 行灯会，禁检安 1 假一骗三，驾驶人以欺骗、贿赂手段取得驾驶证的，三年内不得再次申请驾驶证。 代3超5年不得考 考试中一年，取得后三年，假一吊二撤三醉五逃终生 涉及灯光问题: 不规定使用灯光一分，故障不开危险报警灯三分，不遵守交通信号灯六分…… 12分只需学习，24分则需参加道路考试，36分那就又要参加场地，又要参加道路考试 超载小于30%扣一分，30%至50%扣三分 7座以上超员50未到100的，9分，超速20未到50的，6分 能见200，车速60，车距100。能见100，车速40，车距50。能见50，车速20，尽快驶离。 审验作假一千， 组织他人审验两千， 组织他人有违法两万， 组织贿赂以驾驶证谋取利益三倍以上五万五倍一下十万 疲劳驾驶货车3分，客车9分 增驾 轻1中2大3 自适应巡航 ACC 定速巡航 CCS 防碰撞预警 FCW 电子制动力分配 EBD 交通标志识别系统 TSR 紧急制动辅助系统 EBA 盲点监测系统 BSD 自动变道辅助系统 ALC 自动刹车辅助系统 AEB 电子稳定控制系统 ESP交通信息频道 TMC 自适应前大灯系统 AFS 盲点辅助 BSA","categories":[{"name":"笔记","slug":"笔记","permalink":"https://ascjin.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[],"author":"ASC.JIN"},{"title":"BigDecimal 四舍五入","slug":"BigDecimal-四舍五入","date":"2023-02-09T09:29:00.000Z","updated":"2023-02-10T08:23:29.266Z","comments":true,"path":"2023/02/09/c2463c8c.html","link":"","permalink":"https://ascjin.github.io/2023/02/09/c2463c8c.html","excerpt":"","text":"public static void round_half_up() &#123; //常用 System.out.println(\"四舍五入(保留位后一位是5进位) = \" + new BigDecimal(\"2.35\").setScale(1, BigDecimal.ROUND_HALF_UP)); System.out.println(\"四舍五入(保留位后一位是5舍弃) = \" + new BigDecimal(\"2.35\").setScale(1, BigDecimal.ROUND_HALF_DOWN)); //向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。 System.out.println(\"四舍五入(保留位是奇数) = \" + new BigDecimal(\"4.55\").setScale(1, BigDecimal.ROUND_HALF_EVEN)); //向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。 System.out.println(\"四舍五入(保留位是偶数) = \" + new BigDecimal(\"4.45\").setScale(1, BigDecimal.ROUND_HALF_EVEN)); System.out.println(\" 进位 = \" + new BigDecimal(\"2.31\").setScale(1, BigDecimal.ROUND_UP)); &#125; 四舍五入(保留位后一位是5进位) = 2.4 四舍五入(保留位后一位是5舍弃) = 2.3 四舍五入(保留位是奇数) = 4.6 四舍五入(保留位是偶数) = 4.4 进位 = 2.4 ROUND_CEILING Rounding mode to round towards positive infinity. 向正无穷方向舍入 ROUND_DOWN Rounding mode to round towards zero. 向零方向舍入 ROUND_FLOOR Rounding mode to round towards negative infinity. 向负无穷方向舍入 ROUND_HALF_DOWN Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round down. 向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向下舍入, 例如1.55 保留一位小数结果为1.5 ROUND_HALF_EVEN Rounding mode to round towards the &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case, round towards the even neighbor. 向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，如果保留位上的数字是奇数，使用ROUND_HALF_UP ，如果是偶数，使用ROUND_HALF_DOWN ROUND_HALF_UP Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round up. 向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向上舍入, 1.55保留一位小数结果为1.6 ROUND_UNNECESSARY Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary. 计算结果是精确的，不需要舍入模式 ROUND_UP Rounding mode to round away from zero. 向远离0的方向舍入","categories":[{"name":"笔记","slug":"笔记","permalink":"https://ascjin.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"基础","slug":"笔记/基础","permalink":"https://ascjin.github.io/categories/%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ascjin.github.io/tags/java/"}],"author":"ASC.JIN"},{"title":"HEXO-admin安装和使用 汉化版","slug":"HEXO-admin安装和使用-汉化版","date":"2023-02-03T09:54:00.000Z","updated":"2023-02-10T08:23:44.187Z","comments":true,"path":"2023/02/03/4629ae96.html","link":"","permalink":"https://ascjin.github.io/2023/02/03/4629ae96.html","excerpt":"","text":"1.安装 进入 hexo 源文件目录，执行命令： npm install --save hexo-admin hexo server -d open http:&#x2F;&#x2F;localhost:4000&#x2F;admin&#x2F; 2.配置编辑根目录下：_config.yml 文件，添加： admin: username: myfavoritename password_hash: be121740bf988b2225a313fa1f107ca1 secret: a secret something 其中：username 为登录的用户名，password_hash 为密码的 bcrypt 哈希值，secret 用于使 cookie 安全，可以尽可能复杂。password_hash 的生成 3.汉化打开 myblog&#x2F;node_modules&#x2F;hexo-admin&#x2F;www&#x2F;bundle.js 然后把bundle.js的内容换成我的代码： https://gitlab.com/KINGWDY/tgbb/-/raw/main/bundle.js 或者 下载补丁的方式 使用方法打开博客目录下的“\\node_modules\\hexo-admin”目录，全选复制所有补丁覆盖原文件即可。 注意我使用的是hexo-admin 2.3.0版本，其他版本补丁覆盖之后可能会有问题，可能会有问题，没有测试。 如果使用的和我不是同一个版本，建议先卸载插件，然后再重新添加和我同个版本的hexo-admin，这样就不会有问题。 卸载hexo-admin： npm uninstall hexo-admin –save 重新安装2.3.0版本 npm install hexo-admin@2.3.0 –save 然后覆盖插件。 下载链接：链接：https://pan.baidu.com/s/19nJyISHiUEWc4KgrmrXyuw提取码：t3r0 就可以愉快的play啦~~~","categories":[{"name":"教程","slug":"教程","permalink":"https://ascjin.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ascjin.github.io/tags/hexo/"}],"author":"ASC.JIN"},{"title":"mybatis plus 条件构造器queryWrapper学习","slug":"mybatis-plus-条件构造器queryWrapper学习","date":"2023-02-03T06:33:00.000Z","updated":"2023-02-07T05:53:19.253Z","comments":true,"path":"2023/02/03/10930.html","link":"","permalink":"https://ascjin.github.io/2023/02/03/10930.html","excerpt":"首先奉上mybatis plus的官方文档链接，再看本博客有不清晰的地方，可以查看文档https://mp.baomidou.com/guide/","text":"首先奉上mybatis plus的官方文档链接，再看本博客有不清晰的地方，可以查看文档https://mp.baomidou.com/guide/","categories":[{"name":"摘录","slug":"摘录","permalink":"https://ascjin.github.io/categories/%E6%91%98%E5%BD%95/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://ascjin.github.io/tags/mysql/"},{"name":"mybatis plus","slug":"mybatis-plus","permalink":"https://ascjin.github.io/tags/mybatis-plus/"}],"author":"ASC.JIN"}],"categories":[{"name":"笔记","slug":"笔记","permalink":"https://ascjin.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"基础","slug":"笔记/基础","permalink":"https://ascjin.github.io/categories/%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80/"},{"name":"教程","slug":"教程","permalink":"https://ascjin.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"摘录","slug":"摘录","permalink":"https://ascjin.github.io/categories/%E6%91%98%E5%BD%95/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ascjin.github.io/tags/java/"},{"name":"hexo","slug":"hexo","permalink":"https://ascjin.github.io/tags/hexo/"},{"name":"mysql","slug":"mysql","permalink":"https://ascjin.github.io/tags/mysql/"},{"name":"mybatis plus","slug":"mybatis-plus","permalink":"https://ascjin.github.io/tags/mybatis-plus/"}]}